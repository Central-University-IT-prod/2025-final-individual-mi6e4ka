services:
  db:
    image: postgres:17.3-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: prod
      POSTGRES_USER: prod
      POSTGRES_PASSWORD: brain_rot
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "--quiet"]
      interval: 2s
      timeout: 5s
      retries: 10
  grafana:
    image: grafana/grafana-oss:11.3.4
    container_name: grafana
    restart: unless-stopped
    # admin:proood
    user: "0"
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
    volumes:
      - ./grafana:/etc/grafana/provisioning/
  minio:
    image: minio/minio:RELEASE.2025-02-18T16-25-55Z
    container_name: minio
    entrypoint: sh
    command: -c 'mkdir -p /data/prod && /usr/bin/minio server /data --console-address ":9090"'
    environment:
      MINIO_ROOT_USER: prod
      MINIO_ROOT_PASSWORD: not_for_prod
      MINIO_DEFAULT_BUCKETS: prod
      MINIO_BROWSER_REDIRECT_URL: "http://localhost:9090"
      MINIO_API_REQUESTS_MAX: 0
      MINIO_DOMAIN: localhost
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 2s
      timeout: 5s
      retries: 10
  ollama:
    image: mi6e4kadev/ollama-lightweight:0.5.11-qwen2.5-0.5b
    # build: ./llm
    container_name: ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434"]
      interval: 2s
      timeout: 5s
      retries: 10
  api:
    build: ./api
    ports:
      - 8080:8080
    container_name: prod_api
    volumes:
      - ./api/configs:/app/configs
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 2s
      timeout: 5s
      retries: 10
    restart: always
  bot:
    build: ./bot
    environment:
      TOKEN: REDACTED
      API_URL: http://api:8080

volumes:
  postgres_data:
  minio_data:

### –∑–∞—Ä–∞–Ω–µ–µ –ø—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –≤—Å–µ —á—Ç–æ –≤—ã —Ç—É—Ç —É–≤–∏–¥–∏—Ç–µ, –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø*—Ç–æ–Ω–∞ –∏ –∑–∞ –ù–ê–°–¢–û–õ–¨–ö–û –≥—Ä—è–∑–Ω—ã–π –∫–æ–¥
### –∑–∞—Ç–æ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

import logging
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import Command, or_f
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import CallbackQuery, Message
import json
from dotenv import load_dotenv
import os

load_dotenv()
API_URL = os.environ.get("API_URL")
TOKEN = os.environ.get("TOKEN")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

campaigns_PER_PAGE = 2

user_states = {}

async def fetch_campaigns(page, chat_id):
    global user_states
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/advertisers/{user_states[chat_id]["company_uuid"]}/campaigns?page={page}&size={campaigns_PER_PAGE}") as resp:
            return int(resp.headers.get("X-Total-Count")), (await resp.json())

async def fetch_campaign(campaign_uuid, chat_id):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/advertisers/{user_states[chat_id]["company_uuid"]}/campaigns/{campaign_uuid}") as resp:
            return resp.status, (await resp.json())

async def fetch_delete_campaign(campaign_uuid, chat_id):
    async with aiohttp.ClientSession() as session:
        async with session.delete(f"{API_URL}/advertisers/{user_states[chat_id]["company_uuid"]}/campaigns/{campaign_uuid}") as resp:
            return resp.status

async def fetch_put_campaign(campaign_uuid, chat_id, body):
    async with aiohttp.ClientSession() as session:
        async with session.put(f"{API_URL}/advertisers/{user_states[chat_id]["company_uuid"]}/campaigns/{campaign_uuid}", json=body) as resp:
            return resp.status

async def get_advertiser(advertisers_uuid):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/advertisers/{advertisers_uuid}") as resp:
            return resp.status, (await resp.json())

async def fetch_post_campaign(chat_id, body):
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{API_URL}/advertisers/{user_states[chat_id]["company_uuid"]}/campaigns", json=body) as resp:
            return resp.status, (await resp.json())

async def get_advertiser_stats(chat_id):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/stats/advertisers/{user_states[chat_id]["company_uuid"]}/campaigns") as resp:
            return resp.status, (await resp.json())

async def get_campaign_stats(campaign_uuid):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/stats/campaigns/{campaign_uuid}") as resp:
            return resp.status, (await resp.json())

@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n\n–í–≤–µ–¥–∏ uuid –∫–æ–º–ø–∞–Ω–∏–∏ –∫ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—à—å, –±–µ–∑ —ç—Ç–æ–≥–æ –Ω–∏–∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã")
    user_states[message.chat.id] = {}
    user_states[message.chat.id]["stage"] = "select_company"

@dp.message(Command("help"))
async def send_welcome(message: Message):
    await message.answer("/list - –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n/create - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n/start - —Å–±—Ä–æ—Å–∏—Ç—å —Å–µ—Å—Å–∏—é")

@dp.message(or_f(Command("list"), F.text=="üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"))
async def get_campaigns(message: Message):
    await build_campaigns_list(message.chat.id, 0)

async def build_campaigns_list(chat_id, page, msg_id=None):
    total, campaigns = await fetch_campaigns(page, chat_id)
    
    if not campaigns:
        await bot.send_message(chat_id, "—É –¥–∞–Ω–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ - /create")
        return
    campaigns_reply = ""
    for campaign in campaigns:
        campaigns_reply += f"<b>{campaign["ad_title"]}</b>\n{campaign["ad_text"]}\n–ê–∫—Ç–∏–≤–Ω–∞ —Å {campaign["start_date"]} –ø–æ {campaign["end_date"]} –¥–µ–Ω—å\n/campaign_{campaign["campaign_id"].replace("-", "_")}\n\n"
    
    pagination_kb = InlineKeyboardBuilder()
    if page >= 1:
        pagination_kb.add(InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
    if campaigns_PER_PAGE * (page+1) < total:
        pagination_kb.add(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°", callback_data=f"page_{page+1}"))
    if msg_id != None:
        await bot.edit_message_text(campaigns_reply, chat_id=chat_id, message_id=msg_id)
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=msg_id, reply_markup=pagination_kb.as_markup())
    else:
        await bot.send_message(chat_id, campaigns_reply, reply_markup=pagination_kb.as_markup())
@dp.message(F.text.startswith("/campaign_"))
async def show_campaign(message: Message):
    msg, kbd = await build_campaign_msg(message.text.replace("/campaign_", "").replace("_", "-"), message.chat.id)

    await bot.send_message(message.chat.id, msg, reply_markup=kbd)

async def build_campaign_msg(campaign_id, chat_id):
    status, campaign = await fetch_campaign(campaign_id, chat_id)
    if status != 200:
        return "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", None
    kbd = InlineKeyboardBuilder()
    kbd.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"campaign_edit_{campaign["campaign_id"]}"))
    kbd.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"campaign_stats_{campaign["campaign_id"]}"))
    kbd.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"campaign_delete_{campaign["campaign_id"]}"))
    msg = f'''–û–±—ä—è–≤–ª–µ–Ω–∏–µ
    <b>{campaign["ad_title"]}</b>
–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:
    {campaign["ad_text"]}
–ê–∫—Ç–∏–≤–Ω–æ —Å {campaign["start_date"]} –ø–æ {campaign["end_date"]} –¥–µ–Ω—å

–õ–∏–º–∏—Ç –ø–æ–∫–∞–∑–æ–≤: {campaign["impressions_limit"]}
–õ–∏–º–∏—Ç –∫–ª–∏–∫–æ–≤: {campaign["clicks_limit"]}
–¶–µ–Ω–∞ –∑–∞ –ø–æ–∫–∞–∑: {campaign["cost_per_impression"]}
–¶–µ–Ω–∞ –∑–∞ –∫–ª–∏–∫: {campaign["cost_per_click"]}

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞:
    –ü–æ–ª: {campaign["targeting"]["gender"]}
    –í–æ–∑—Ä–∞—Å—Ç —Å: {campaign["targeting"]["age_from"]} –ø–æ {campaign["targeting"]["age_to"]} –ª–µ—Ç
    –õ–æ–∫–∞—Ü–∏—è: {campaign["targeting"]["location"]}'''
    return msg, kbd.as_markup()

@dp.message(or_f(Command("stats"), F.text=="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def campaign_stats(message: Message):
    status, stats = await get_advertiser_stats(message.chat.id)
    await message.answer(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:\n\n{build_stats(stats)}")

def build_stats(stats):
    return f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑–æ–≤: {stats["impressions_count"]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤: {stats["clicks_count"]}\n–ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats["conversion"]}%\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –ø–æ–∫–∞–∑—ã: {stats["spent_impressions"]}\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –∫–ª–∏–∫–∏: {stats["spent_clicks"]}\n–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: {stats["spent_total"]}"

@dp.callback_query(F.data.contains("page_"))
async def paginate_campaigns(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    if chat_id not in user_states:
        return
    await build_campaigns_list(chat_id, int(callback_query.data.replace("page_", "")), callback_query.message.message_id)
    await callback_query.answer()

@dp.callback_query(F.data.startswith("campaign_delete_"))
async def delete_campaign(callback_query: CallbackQuery):
    campaign_uuid = callback_query.data.replace("campaign_delete_", "").replace("_", "-")
    await fetch_delete_campaign(campaign_uuid, callback_query.message.chat.id)
    await bot.send_message(callback_query.message.chat.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    await callback_query.answer()

@dp.callback_query(F.data.startswith("campaign_edit_"))
async def edit_campaign(callback_query: CallbackQuery):
    campaign_id = callback_query.data.removeprefix("campaign_edit_")
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=callback_query.message.text + "\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:")
    kbd = InlineKeyboardBuilder()
    kbd.add(InlineKeyboardButton(text="–Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_{campaign_id}_ad_title"))
    kbd.add(InlineKeyboardButton(text="–æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_{campaign_id}_ad_text"))
    kbd.add(InlineKeyboardButton(text="$ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"edit_{campaign_id}_cost_per_impression"))
    kbd.add(InlineKeyboardButton(text="$ –∑–∞ –∫–ª–∏–∫", callback_data=f"edit_{campaign_id}_cost_per_click"))
    kbd.add(InlineKeyboardButton(text="–∫–æ–ª-–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", callback_data=f"edit_{campaign_id}_impressions_limit"))
    kbd.add(InlineKeyboardButton(text="–∫–æ–ª-–≤–æ –∫–ª–∏–∫–æ–≤", callback_data=f"edit_{campaign_id}_clicks_limit"))
    kbd.add(InlineKeyboardButton(text="–≤–æ–∑—Ä–∞—Å—Ç —Å", callback_data=f"edit_{campaign_id}_targeting_age_from"))
    kbd.add(InlineKeyboardButton(text="–≤–æ–∑—Ä–∞—Å—Ç –ø–æ", callback_data=f"edit_{campaign_id}_targeting_age_to"))
    kbd.add(InlineKeyboardButton(text="–≥–µ–Ω–¥–µ—Ä", callback_data=f"edit_{campaign_id}_targeting_gender"))
    kbd.add(InlineKeyboardButton(text="–ª–æ–∫–∞—Ü–∏—è", callback_data=f"edit_{campaign_id}_targeting_location"))
    kbd.add(InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞", callback_data=f"restore_campaign_{campaign_id}"))
    kbd.adjust(2,2,2,4,1)
    await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=kbd.as_markup())
    await callback_query.answer()

@dp.callback_query(F.data.startswith("campaign_stats_"))
async def stats_campaign(callback_query: CallbackQuery):
    campaign_id = callback_query.data.removeprefix("campaign_stats_")
    kbd = InlineKeyboardBuilder()
    kbd.add(InlineKeyboardButton(text="–Ω–∞–∑–∞–¥", callback_data=f"restore_campaign_{campaign_id}"))
    status, stats = await get_campaign_stats(campaign_id)
    await callback_query.message.edit_text(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:\n\n{build_stats(stats)}", reply_markup=kbd.as_markup())
    await callback_query.answer()

@dp.callback_query(F.data.startswith("restore_campaign_"))
async def restore_campaign(callback_query: CallbackQuery):
    campaign_id = callback_query.data.removeprefix("restore_campaign_")
    msg, kbd = await build_campaign_msg(campaign_id, callback_query.message.chat.id)
    await callback_query.message.edit_text(msg, reply_markup=kbd)
    await callback_query.answer()

@dp.callback_query(F.data == "create_campaign_cancel")
async def create_campaign_cancel(callback_query: CallbackQuery):
    user_states[callback_query.message.chat.id]["new_campaign"] = {}
    await callback_query.message.answer("—Ç–æ–≥–¥–∞ –Ω–µ —Å–º–µ—é –∑–∞–¥–µ—Ä–∂–∏–≤–∞—Ç—å\n\n–µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - /create", message_effect_id="5046589136895476101")
    await callback_query.message.delete()
    await callback_query.answer()

@dp.callback_query(F.data == "create_campaign")
async def create_campaign_cancel(callback_query: CallbackQuery):
    await callback_query.message.delete()
    status, body = await fetch_post_campaign(callback_query.message.chat.id, user_states[callback_query.message.chat.id]["new_campaign"])
    user_states[callback_query.message.chat.id]["new_campaign"] = {}
    if status != 201:
        await callback_query.message.answer("—ç—Ö, –Ω–µ—É–¥–∞—á–∞... –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è!\n\n—Ç—ã–∫ -> /create")
        return
    await callback_query.message.answer(f"—É—Å–ø–µ—Ö! –±–µ–≥–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è -> /campaign_{body["campaign_id"].replace("-", "_")}", message_effect_id="5046509860389126442")
    await callback_query.answer()

@dp.callback_query(F.data.startswith("edit_"))
async def edit_campaign_text(callback_query: CallbackQuery):
    edit_field = '_'.join(callback_query.data.split("_")[2:])
    await callback_query.message.answer(f"–≤–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è {edit_field}\n(—á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–µ–¥–∏ /cancel)")
    user_states[callback_query.message.chat.id]["stage"] = callback_query.data
    await callback_query.answer()

@dp.message(Command("cancel"))
async def cancel_command(message: Message):
    user_states[message.chat.id]["stage"] = None
    await message.answer("–¢–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@dp.message(or_f(Command("create"), F.text=="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ"))
async def cancel_command(message: Message):
    user_states[message.chat.id]["stage"] = "create_campaign_step_1"
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏\n–û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /cancel")

@dp.message()
async def handle_text(message: Message):
    if message.chat.id not in user_states.keys():
        await message.answer("–Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, /help")
        return
    stage = user_states[message.chat.id]["stage"]
    if stage == None:
        await message.answer("–Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, /help")
        return
    elif stage == "select_company":
        status, body = await get_advertiser(message.text)
        if status != 200:
            await message.answer("UUID –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è —Å –º–æ–µ–π –±–∞–∑–æ–π, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ")
            return
        user_states[message.chat.id]["company_uuid"] = message.text
        user_states[message.chat.id]["stage"] = None
        buttons = [
            [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ")],
        ]
        kbd = ReplyKeyboardMarkup(keyboard=buttons,resize_keyboard=True)
        await message.answer(f"–∑–∞–ø–æ–º–Ω–∏–ª, —Ç—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏ {body["name"]}!\n–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ - /help", reply_markup=kbd)
    elif stage.startswith("edit_"):
        campaign_id = stage.split("_")[1]
        edit_field = '_'.join(stage.split("_")[2:])
        status, campaign = await fetch_campaign(campaign_id, message.chat.id)
        if status != 200:
            await message.answer("—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
            return
        new_value = message.text
        if edit_field not in ["ad_title", "ad_text", "targeting_gender", "targeting_location"]:
            if edit_field in ["cost_per_impression", "cost_per_click"]:
                new_value = float(new_value)
            else:
                new_value = int(new_value)

        if edit_field.startswith("targeting_"):
            if "targeting" not in campaign:
                campaign["targeting"] = {}
            campaign["targeting"][edit_field.replace("targeting_", "")] = new_value
        else:
            campaign[edit_field] = new_value
        status = await fetch_put_campaign(campaign_id, message.chat.id, campaign)
        if status != 200:
            await message.answer(f"–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏–ª–∏ –ø–æ–ª–µ —Å–µ–π—á–∞—Å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è. –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ")
            return
        user_states[message.chat.id]["stage"] = None
        await message.answer("—É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", message_effect_id="5104841245755180586")
        msg, kbd = await build_campaign_msg(campaign_id, message.chat.id)
        await message.answer(msg, reply_markup=kbd)
    elif stage == "create_campaign_step_1":
        user_states[message.chat.id]["new_campaign"] = {}
        user_states[message.chat.id]["new_campaign"]["ad_title"] = message.text
        user_states[message.chat.id]["stage"] = "create_campaign_step_2"
        await message.answer(f"–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - \"{message.text}\", —É–∂–µ –Ω–µ–ø–ª–æ—Ö–æ!\n—Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
    elif stage == "create_campaign_step_2":
        user_states[message.chat.id]["new_campaign"]["ad_text"] = message.text
        user_states[message.chat.id]["stage"] = "create_campaign_step_3"
        await message.answer(f"—Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n{message.text}\n\n—Ç–µ–ø–µ—Ä—å –∑–∞–¥–∞–π –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ –∫–ª–∏–∫–æ–≤, –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
    elif stage == "create_campaign_step_3":
        try:
            impressions_limit, clicks_limit = map(int, message.text.split())
        except:
            await message.answer("–ø–æ—Ö–æ–∂–µ —á—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–∏—Å–µ–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
            return
        if clicks_limit > impressions_limit:
            await message.answer("–∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤!")
            return
        user_states[message.chat.id]["new_campaign"]["impressions_limit"] = impressions_limit
        user_states[message.chat.id]["new_campaign"]["clicks_limit"] = clicks_limit
        user_states[message.chat.id]["stage"] = "create_campaign_step_4"
        await message.answer(f"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ {impressions_limit}\n–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ {clicks_limit}\n\n—Ç–µ–ø–µ—Ä—å –∑–∞–¥–∞–π —Ü–µ–Ω—É –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ü–µ–Ω—É –∑–∞ –∫–ª–∏–∫, –¥–≤–∞ —á–∏—Å–ª–∞ (–º–æ–∂–Ω–æ –¥—Ä–æ–±–Ω—ã—Ö) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
    elif stage == "create_campaign_step_4":
        try:
            per_impression, per_click = map(float, message.text.split())
        except:
            await message.answer("–ø–æ—Ö–æ–∂–µ —á—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–∏—Å–µ–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
            return
        user_states[message.chat.id]["new_campaign"]["cost_per_impression"] = per_impression
        user_states[message.chat.id]["new_campaign"]["cost_per_click"] = per_click
        user_states[message.chat.id]["stage"] = "create_campaign_step_5"
        await message.answer(f"—Ü–µ–Ω–∞ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä {per_impression}\n—Ü–µ–Ω–∞ –∑–∞ –∫–ª–∏–∫ {per_click}\n\n—É —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è! –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: —Ç–µ–ø–µ—Ä—å –∑–∞–¥–∞–π –¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ –∏ –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏, –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. —É—á—Ç–∏, —á—Ç–æ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–ª—å–∑—è –ø–æ–º–µ–Ω—è—Ç—å –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º")
    elif stage == "create_campaign_step_5":
        try:
            start_date, end_date = map(int, message.text.split())
        except:
            await message.answer("–ø–æ—Ö–æ–∂–µ —á—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–∏—Å–µ–ª, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
            return
        user_states[message.chat.id]["new_campaign"]["start_date"] = start_date
        user_states[message.chat.id]["new_campaign"]["end_date"] = end_date
        user_states[message.chat.id]["stage"] = None
        await message.answer(f"–¥–µ–Ω—å –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è {start_date}\n–¥–µ–Ω—å –∫–æ–Ω—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—è {end_date}")
        kbd = InlineKeyboardBuilder()
        kbd.add(InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="create_campaign_cancel"))
        kbd.add(InlineKeyboardButton(text="—Å–æ–∑–¥–∞—Ç—å", callback_data="create_campaign"))
        await message.answer(f"—Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞—Ç—å. —É–¥–∞—á–∏!\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {user_states[message.chat.id]["new_campaign"]["ad_title"]}", reply_markup=kbd.as_markup())
    else:
        await message.answer("–Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, /help")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())